default:
    image: swipl:stable

stages:
  - build
  - test_syntax
  - test_base
  - test_complex
  - test_function

before_script:
  - swipl --version
  - ls -l

build-job:
  stage: build
  before_script:
    - apt-get update
    - apt-get install make
  script:
    - echo "Hello, $GITLAB_USER_LOGIN!"
    - make
  artifacts:
    paths:
      - lambda_calculus

test-app:
  stage: test_base
  script:
    - test $(echo "(lx.x) a" | ./lambda_calculus) == $(echo "a" | ./lambda_calculus)
    - test $(echo "(lx.xx) a" | ./lambda_calculus) == $(echo "aa" | ./lambda_calculus)
    - test $(echo "lx.(lx.x)x" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
    - test $(echo "la.(lx.xx)a" | ./lambda_calculus) == $(echo "lx.xx" | ./lambda_calculus)
    - test $(echo "lx.(lx.xx)x" | ./lambda_calculus) == $(echo "lx.xx" | ./lambda_calculus)
    - test $(echo "lx.(lx.(lx.xx)xx)x" | ./lambda_calculus) == $(echo "lx.xxx" | ./lambda_calculus)

test-nat:
  stage: test_syntax
  script:
    - test $(echo "0N" | ./lambda_calculus) == $(echo "(0N)" | ./lambda_calculus)
    - test $(echo "1N" | ./lambda_calculus) == $(echo "(1N)" | ./lambda_calculus)
    - test $(echo "2N" | ./lambda_calculus) == $(echo "(2N)" | ./lambda_calculus)
    - test $(echo "3N" | ./lambda_calculus) == $(echo "(3N)" | ./lambda_calculus)
    - test $(echo "4N" | ./lambda_calculus) == $(echo "(4N)" | ./lambda_calculus)

test-nat_succ:
  stage: test_base
  needs: [test-nat]
  script:
    - test $(echo "(lnfx.f(nfx))0N" | ./lambda_calculus) == $(echo "(1N)" | ./lambda_calculus)
    - test $(echo "(lnfx.nf(fx))0N" | ./lambda_calculus) == $(echo "(1N)" | ./lambda_calculus)
    - test $(echo "(lnfx.f(nfx))1N" | ./lambda_calculus) == $(echo "(2N)" | ./lambda_calculus)
    - test $(echo "(lnfx.nf(fx))1N" | ./lambda_calculus) == $(echo "(2N)" | ./lambda_calculus)
    - test $(echo "(lnfx.f(nfx))2N" | ./lambda_calculus) == $(echo "(3N)" | ./lambda_calculus)
    - test $(echo "(lnfx.nf(fx))2N" | ./lambda_calculus) == $(echo "(3N)" | ./lambda_calculus)
    - test $(echo "(lnfx.f(nfx))3N" | ./lambda_calculus) == $(echo "(4N)" | ./lambda_calculus)
    - test $(echo "(lnfx.nf(fx))3N" | ./lambda_calculus) == $(echo "(4N)" | ./lambda_calculus)
    - test $(echo "(lnfx.f(nfx))10N" | ./lambda_calculus) == $(echo "(11N)" | ./lambda_calculus)
    - test $(echo "(lnfx.nf(fx))10N" | ./lambda_calculus) == $(echo "(11N)" | ./lambda_calculus)
    - test $(echo "(lnfx.f(nfx))100N" | ./lambda_calculus) == $(echo "(101N)" | ./lambda_calculus)
    - test $(echo "(lnfx.nf(fx))100N" | ./lambda_calculus) == $(echo "(101N)" | ./lambda_calculus)

test-nat_add:
  stage: test_complex
  needs: [test-nat_succ]
  script:
    - test $(echo "(lnmfx.nf(mfx)) 12N 13N" | ./lambda_calculus) == $(echo "25N" | ./lambda_calculus)
    - test $(echo "(lnmfx.nf(mfx)) 10N 15N" | ./lambda_calculus) == $(echo "25N" | ./lambda_calculus)
    - test $(echo "(lnmfx.nf(mfx)) 16N 89N" | ./lambda_calculus) == $(echo "105N" | ./lambda_calculus)
    - test $(echo "(lnmfx.nf(mfx)) 0N 5N" | ./lambda_calculus) == $(echo "5N" | ./lambda_calculus)
    - test $(echo "(lnmfx.nf(mfx)) 5N 0N" | ./lambda_calculus) == $(echo "5N" | ./lambda_calculus)
    - test $(echo "(lnmfx.nf(mfx)) 0N 0N" | ./lambda_calculus) == $(echo "0N" | ./lambda_calculus)

test-zal:
  stage: test_syntax
  script:
    - test $(echo "-2Z" | ./lambda_calculus) == $(echo "(-2Z)" | ./lambda_calculus)
    - test $(echo "-1Z" | ./lambda_calculus) == $(echo "(-1Z)" | ./lambda_calculus)
    - test $(echo "0Z" | ./lambda_calculus) == $(echo "(0Z)" | ./lambda_calculus)
    - test $(echo "1Z" | ./lambda_calculus) == $(echo "(1Z)" | ./lambda_calculus)
    - test $(echo "2Z" | ./lambda_calculus) == $(echo "(2Z)" | ./lambda_calculus)

test-id:
  stage: test_syntax
  script:
    - test $(echo "lx.x" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
    - test $(echo "la.a" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
    - test $(echo "\\x.x" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
    - test $(echo "\\a.a" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
    - test $(echo "λx.x" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
    - test $(echo "λa.a" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)

test-id2:
  stage: test_base
  needs: [test-id]
  script:
    - test $(echo "<>" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
    - test $(echo "<><>" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
    - test $(echo "<><><>" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
    - test $(echo "<><><><>" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
    - test $(echo "<><><><>" | ./lambda_calculus) == $(echo "<>" | ./lambda_calculus)
